---
import Breadcrumbs from "@/components/Breadcrumbs.astro";
import LicenseCard from "@/components/LicenseCard.astro";
import PostHead from "@/components/PostHead.astro";
import PostNavigation from "@/components/PostNavigation.astro";
import SubpostsHeader from "@/components/SubpostsHeader.astro";
import SubpostsSidebar from "@/components/SubpostsSidebar.astro";
import TOCHeader from "@/components/TOCHeader.astro";
import TOCSidebar from "@/components/TOCSidebar.astro";
import { Badge, badgeVariants } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { SITE } from "@/consts";
import Layout from "@/layouts/Layout.astro";
import { useBudoux } from "@/lib/budoux";
import {
  formatTotal,
  getAdjacentPosts,
  getAllPostsAndSubposts,
  getCombinedReadingTime,
  getParentId,
  getParentPost,
  getPostReadingTime,
  getSubpostCount,
  getTOCSections,
  hasSubposts,
  isSubpost,
} from "@/lib/data-utils";
import { cn, formatDate, subpostCountToString } from "@/lib/utils";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import { render } from "astro:content";

export async function getStaticPaths() {
  const posts = await getAllPostsAndSubposts();
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }));
}

const post = Astro.props;
const currentPostId = Astro.params.id;
const { Content, headings } = await render(post);

const isCurrentSubpost = isSubpost(post);
const navigation = await getAdjacentPosts(post, currentPostId);
const parentPost = isCurrentSubpost ? await getParentPost(currentPostId) : null;

const hasChildPosts = await hasSubposts(currentPostId);
const subpostCount = !isCurrentSubpost
  ? await getSubpostCount(currentPostId)
  : 0;
const postReadingTime = await getPostReadingTime(currentPostId, SITE.locale);
const combinedReadingTime =
  hasChildPosts && !isCurrentSubpost
    ? await getCombinedReadingTime(post, SITE.locale)
    : null;

const tocSections = await getTOCSections(post);

const budoux = useBudoux();
---

<Layout>
  <PostHead slot="head" post={post} />
  {
    (hasChildPosts || isCurrentSubpost) && (
      <SubpostsHeader
        slot="subposts-navigation"
        parentId={isCurrentSubpost ? getParentId(currentPostId) : currentPostId}
      />
    )
  }
  {
    headings?.length > 0 &&
      !(
        isCurrentSubpost &&
        headings.length === 1 &&
        headings[0].text === post.data.title
      ) && <TOCHeader slot="table-of-contents" headings={headings} />
  }

  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(calc(var(--breakpoint-md)-2rem),100%)_minmax(0px,1fr)] gap-y-6"
    data-pagefind-body
  >
    <div class="col-start-2" data-pagefind-ignore>
      <Breadcrumbs
        items={[
          { href: "/blog", label: "Blog", icon: "lucide:library-big" },
          ...(isCurrentSubpost && parentPost
            ? [
                {
                  href: `/blog/${parentPost.id}`,
                  label: parentPost.data.title,
                  icon: "lucide:book-open",
                },
                {
                  href: `/blog/${currentPostId}`,
                  label: post.data.title,
                  icon: "lucide:file-text",
                },
              ]
            : [
                {
                  href: `/blog/${currentPostId}`,
                  label: post.data.title,
                  icon: "lucide:book-open-text",
                },
              ]),
        ]}
      />
    </div>

    {
      post.data.image && (
        <Image
          src={post.data.image}
          alt={post.data.title}
          width={1200}
          height={630}
          class="col-span-full mx-auto w-full max-w-3xl object-cover"
          data-pagefind-meta="image[src], image_alt[alt]"
        />
      )
    }

    <section class="col-start-2 flex flex-col gap-y-6 text-center">
      <div class="flex flex-col">
        <!-- Title -->
        <h1
          class={cn(
            "mb-2 scroll-mt-31 text-3xl leading-tight font-medium sm:text-4xl align-middle",
            budoux.style,
          )}
          id="post-title"
        >
          {
            post.data.draft && (
              <Badge variant="destructive" className="inline-block ">
                下書き
              </Badge>
            )
          }

          {budoux.parse(post.data.title)}
        </h1>

        <divs
          class="text-muted-foreground divide-border mb-4 flex flex-col items-center justify-center divide-y text-xs sm:flex-row sm:flex-wrap sm:divide-x sm:divide-y-0 sm:text-sm"
        >
          <!-- Date -->
          <div
            class="flex w-full items-center justify-center gap-2 py-2 sm:w-fit sm:px-2 sm:py-0 first:sm:pl-0 last:sm:pr-0"
          >
            <time
              datetime={post.data.date.toISOString()}
              data-pagefind-meta={`date:${formatDate(post.data.date, SITE.locale)}`}
              >{formatDate(post.data.date, SITE.locale)}</time
            >
          </div>

          <div
            class="flex w-full items-center justify-center gap-2 py-2 sm:w-fit sm:px-2 sm:py-0 first:sm:pl-0 last:sm:pr-0"
          >
            <span data-pagefind-meta={`reading:${postReadingTime}`}>
              {postReadingTime}
              {
                combinedReadingTime &&
                  combinedReadingTime !== postReadingTime && (
                    <span class="text-muted-foreground">
                      {" "}
                      ({formatTotal(combinedReadingTime, SITE.locale)})
                    </span>
                  )
              }
            </span>
          </div>

          {
            subpostCount > 0 && (
              <div
                class="flex w-full items-center justify-center gap-1 py-2 sm:w-fit sm:px-2 sm:py-0 first:sm:pl-0 last:sm:pr-0"
                data-pagefind-ignore
              >
                <Icon name="lucide:file-text" class="size-3" />
                {subpostCountToString(subpostCount, SITE.locale)}
              </div>
            )
          }
        </divs>
        <div
          class="flex flex-wrap justify-center gap-2"
          data-pagefind-meta={post.data.tags
            ? "tag:" + post.data.tags.join(", ")
            : null}
          data-pagefind-ignore
        >
          {
            post.data.tags &&
              post.data.tags.length > 0 &&
              post.data.tags.map((tag) => (
                <a
                  href={`/tags/${tag}`}
                  class={badgeVariants({ variant: "secondary" })}
                >
                  <Icon name="lucide:hash" class="size-3" />
                  {tag}
                </a>
              ))
          }
        </div>
      </div>

      {
        isCurrentSubpost && (
          <PostNavigation
            newerPost={navigation.newer}
            olderPost={navigation.older}
            parentPost={isCurrentSubpost ? navigation.parent : undefined}
            data-pagefind-ignore
          />
        )
      }
    </section>

    {
      (hasChildPosts || isCurrentSubpost) && (
        <SubpostsSidebar
          parentId={
            isCurrentSubpost ? getParentId(currentPostId) : currentPostId
          }
          className="w-64"
          data-pagefind-ignore
        />
      )
    }

    <article class="prose col-start-2 max-w-none">
      <Content />

      <LicenseCard license={post.data.license} />
    </article>

    {
      tocSections.length > 0 && (
        <TOCSidebar
          post={post}
          sections={tocSections}
          currentPostId={currentPostId}
        />
      )
    }

    <PostNavigation
      newerPost={navigation.newer}
      olderPost={navigation.older}
      parentPost={isCurrentSubpost ? navigation.parent : undefined}
      data-pagefind-ignore
    />
  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed right-8 bottom-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>

  <script>
    document.addEventListener("astro:page-load", () => {
      const scrollToTopButton = document.getElementById("scroll-to-top");
      const footer = document.querySelector("footer");

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener("click", () => {
          window.scrollTo({ top: 0, behavior: "smooth" });
        });

        window.addEventListener("scroll", () => {
          const footerRect = footer.getBoundingClientRect();
          const isFooterVisible = footerRect.top <= window.innerHeight;

          scrollToTopButton.classList.toggle(
            "hidden",
            window.scrollY <= 300 || isFooterVisible,
          );
        });
      }
    });
  </script>

  <script>
    // ヘッダーをスクロールしたら上に飛ばす
    // 上にスクロールするか、画面の一番上になったら戻す
    document.addEventListener("astro:page-load", () => {
      const header = document.getElementById("header");
      if (!header) return;
      let lastScrollY = 0;

      window.addEventListener("scroll", () => {
        const headerHeight = header ? header.offsetHeight : 0;
        // important: ヘッダーを操作して高さが変化するとスクロールが起こった判定になり、
        // クリックしただけでヘッダーが隠れてしまう。そのため、ヘッダーの高さを除いたスクロール位置を計算する。
        const currentScrollY = window.scrollY - headerHeight;
        const scrollDiff = currentScrollY - lastScrollY;
        lastScrollY = currentScrollY;

        if (scrollDiff < 0 || currentScrollY <= headerHeight) {
          header.style.transform = "translateY(0)";
        } else if (scrollDiff > 0) {
          header.style.transform = "translateY(-100%)";
        }
      });
    });
  </script>
</Layout>
