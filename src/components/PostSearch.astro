---
export interface Props {
  readonly id?: string;
  readonly className?: string;
  readonly query?: string;
  readonly options?: Record<string, any>;
}

const { id, className, query, options } = Astro.props;
const bundlePath = `${import.meta.env.BASE_URL}pagefind/`;
---

<div
  id={id}
  class:list={[className, "pagefind-init"]}
  data-pagefind-ui
  data-bundle-path={bundlePath}
  data-query={query}
  data-ui-options={JSON.stringify(options)}
>
</div>

<style>
  @reference "../styles/global.css";

  /* https://github.com/Pagefind/pagefind/blob/main/pagefind_ui/modular/css/ui.css */

  [data-pagefind-ui] {
    /* form */
    .pagefind-ui__form {
      @apply relative;
    }

    /* input */
    .pagefind-ui__search-input {
      @apply file:text-foreground placeholder:text-muted-foreground;
      @apply selection:bg-primary selection:text-primary-foreground;
      @apply dark:bg-input/30 border-input focus-visible:border-ring;
      @apply focus-visible:ring-ring/50 aria-invalid:ring-destructive/20;
      @apply dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive;
      @apply flex w-full min-w-0 rounded-md border bg-transparent;
      @apply px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none;
      @apply file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium;
      @apply focus-visible:ring-[3px];
      @apply disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm;

      /* size */
      @apply h-10;
    }

    /* common button */
    button {
      /* base */
      @apply focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20;
      @apply dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive;
      @apply inline-flex shrink-0 items-center justify-center gap-2 rounded-md text-sm font-medium;
      @apply whitespace-nowrap transition-all outline-none focus-visible:ring-[3px];
      @apply disabled:pointer-events-none disabled:opacity-50;
      @apply [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4;

      /* size default */
      @apply h-10 px-4 py-2 has-[>svg]:px-3;

      /* pagefind */
      @apply cursor-pointer;

      &.pagefind-ui__button {
        @apply mt-4 w-full;

        /* outline */
        @apply bg-background hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 border shadow-xs;
      }

      /* clear button */
      &.pagefind-ui__search-clear {
        /* ghost */
        @apply hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50;

        /* clear button */
        @apply absolute top-0 right-0; /* ceenter vertically */
      }
    }

    /* disabled clear button */
    .pagefind-ui__suppressed {
      @apply pointer-events-none opacity-0;
    }

    .pagefind-ui__drawer {
      @apply py-2;

      .pagefind-ui__results-area {
        /* search result */
        @apply flex flex-col gap-y-4;

        /* found message */
        .pagefind-ui__message {
          @apply text-sm;
        }

        /* list */
        ol.pagefind-ui__results {
          @apply grid grid-cols-5 gap-y-2;

          li.pagefind-ui__result {
            @apply bg-secondary/50 col-span-5 grid grid-cols-subgrid rounded-md;

            /* thumbnail? */
            .pagefind-ui__result-thumb {
              @apply h-full w-full place-content-center;

              /* if image available */
              .pagefind-ui__result-image {
                @apply mx-auto object-cover p-8;

                &::before {
                  @apply sr-only;
                }
              }
            }

            /* inner text */
            .pagefind-ui__result-inner {
              @apply col-span-4 flex grow flex-col gap-y-0.5 p-4;

              /* title */
              p.pagefind-ui__result-title {
                @apply text-lg font-semibold;
              }

              /* all link */
              a {
                @apply hover:underline;
              }

              /* nested */
              .pagefind-ui__result-nested {
                @apply relative pl-4;

                /* section link */
                .pagefind-ui__result-link {
                  @apply text-lg font-medium;

                  &::before {
                    @apply absolute top-0 left-0 py-0.5 font-["Geist"] content-['â†³'];
                  }
                }

                /* paragraph */
                p.pagefind-ui__result-excerpt {
                  @apply text-primary/75 text-sm;
                }
              }

              /* tags */
              ul.pagefind-ui__result-tags {
                @apply mt-1 flex flex-wrap items-center gap-1;

                li {
                  /* @apply bg-accent text-accent-foreground rounded-md px-2 py-0.5 text-xs font-medium; */
                  @apply inline-flex items-center justify-center rounded-md border;
                  @apply w-fit shrink-0 px-2 py-0.5 text-xs font-medium whitespace-nowrap;
                  @apply gap-1 [&>svg]:pointer-events-none [&>svg]:size-3;
                  @apply focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px];
                  @apply aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive;
                  @apply overflow-hidden transition-[color,box-shadow];

                  /* default */
                  @apply bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90 border-transparent;
                }
              }
            }
          }
        }
      }

      /* marked text */
      mark {
        @apply bg-yellow-300 font-medium text-black;
      }
    }
  }
</style>

<script>
  import { PagefindUI } from "@pagefind/default-ui";

  function initPageFind() {
    const allSelector = "[data-pagefind-ui]";
    for (const el of document.querySelectorAll(
      `${allSelector}.pagefind-init`,
    )) {
      const elSelector = [
        ...(el.id ? [`#${el.id}`] : []),
        ...[...el.classList.values()].map((c) => `.${c}`),
        allSelector,
      ].join("");
      const bundlePath = el.getAttribute("data-bundle-path");
      const opts = JSON.parse(el.getAttribute("data-ui-options") ?? "{}");
      new PagefindUI({
        ...opts,
        element: elSelector,
        bundlePath,
      });
      el.classList.remove("pagefind-init");
      const query = el.getAttribute("data-query");
      if (query) {
        const input = el.querySelector<HTMLInputElement>(`input[type="text"]`);
        if (input) {
          input.value = query;
          input.dispatchEvent(new Event("input", { bubbles: true }));
        }
      }
    }
  }

  document.addEventListener("astro:page-load", initPageFind);
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initPageFind);
  } else {
    initPageFind();
  }
</script>

<script>
  document.addEventListener("astro:page-load", () => {
    const input = document.querySelector<HTMLInputElement>(
      "[data-pagefind-ui] input[type='text']",
    );

    const setQueryParam = (event: Event) => {
      const value = (event.target as HTMLInputElement).value;

      const url = new URL(window.location.href);
      if (value) {
        url.searchParams.set("q", value);
      } else {
        url.searchParams.delete("q");
      }
      window.history.replaceState({}, "", url.toString());
    };

    if (input) {
      input.addEventListener("input", setQueryParam);
      // Set initial query if exists
      const url = new URL(window.location.href);
      const query = url.searchParams.get("q");
      if (query) {
        input.value = query;
        input.dispatchEvent(new Event("input", { bubbles: true }));
      }
    }
  });
</script>
