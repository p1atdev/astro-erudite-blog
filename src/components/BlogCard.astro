---
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { SITE } from "@/consts";
import {
  getCombinedReadingTime,
  getSubpostCount,
  isSubpost,
} from "@/lib/data-utils";
import { formatDate, subpostCountToString } from "@/lib/utils";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import Link from "./Link.astro";

interface Props {
  entry: CollectionEntry<"blog">;
}

const { entry } = Astro.props;
const formattedDate = formatDate(entry.data.date, SITE.locale);
const readTime = await getCombinedReadingTime(entry, SITE.locale);
const subpostCount = !isSubpost(entry) ? await getSubpostCount(entry.id) : 0;
---

<div
  class="hover:bg-secondary/50 rounded-xl border transition-colors duration-300 ease-in-out"
>
  <Link
    href={`/${entry.collection}/${entry.id}`}
    class="group focus-visible:border-ring focus-visible:ring-ring/50 relative grid grid-cols-1 grid-rows-subgrid gap-4 overflow-hidden rounded-xl outline-none focus-visible:ring-[3px] sm:flex-row"
  >
    <div class="grow px-6 py-4">
      <h3 class="mb-1 text-lg font-medium">{entry.data.title}</h3>
      <p class="text-muted-foreground mb-2 text-sm">{entry.data.description}</p>

      <div
        class="text-muted-foreground mb-2 flex flex-wrap items-center gap-x-2 text-xs"
      >
        <span>{formattedDate}</span>
        <Separator orientation="vertical" className="h-4!" />
        <span>
          <Icon name="lucide:hourglass" class="inline size-3" />
          {readTime}
        </span>
        {
          subpostCount > 0 && (
            <>
              <Separator orientation="vertical" className="h-4!" />
              <span class="flex items-center gap-1">
                <Icon name="lucide:file-text" class="size-3" />
                {subpostCountToString(subpostCount, SITE.locale)}
              </span>
            </>
          )
        }
      </div>

      {
        entry.data.tags && (
          <div class="flex flex-wrap gap-2">
            {entry.data.tags.map((tag) => (
              <Badge variant="secondary" className="flex items-center gap-x-1">
                <Icon name="lucide:hash" class="size-3" />
                {tag}
              </Badge>
            ))}
          </div>
        )
      }

      {
        entry.data.image && (
          <div class="absolute top-0 right-0 bottom-0 -z-10 max-h-full max-w-2/3 sm:shrink-0">
            <Image
              src={entry.data.image}
              alt={entry.data.title}
              width={1200}
              height={630}
              class:list={[
                "h-full mask-l-from-5% object-cover transition duration-300 ease-in-out group-hover:mask-l-from-40% group-hover:brightness-100 md:mask-l-from-10%",
                "opacity-30 group-hover:opacity-100 dark:opacity-100 dark:brightness-50",
              ]}
            />
          </div>
        )
      }
    </div>
  </Link>
</div>
