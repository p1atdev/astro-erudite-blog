---

---

<input type="range" min="0" max="360" id="hue-slider" />

<style>
  @reference "@/styles/global.css";

  #hue-slider {
    --grad-base: 97% 0.25;

    width: 100%;
    outline: none;
    background: linear-gradient(
      to right,
      oklch(var(--grad-base) 0),
      oklch(var(--grad-base) 30),
      oklch(var(--grad-base) 60),
      oklch(var(--grad-base) 90),
      oklch(var(--grad-base) 120),
      oklch(var(--grad-base) 150),
      oklch(var(--grad-base) 180),
      oklch(var(--grad-base) 210),
      oklch(var(--grad-base) 240),
      oklch(var(--grad-base) 270),
      oklch(var(--grad-base) 300),
      oklch(var(--grad-base) 330),
      oklch(var(--grad-base) 360)
    );
    appearance: none;
    cursor: pointer;

    @apply hover:ring-foreground/30 h-4 rounded-full ring ring-transparent transition-normal duration-200;
  }

  :global([data-theme="dark"]) #hue-slider {
    --grad-base: 75% 0.25;
  }

  #hue-slider::-webkit-slider-thumb {
    appearance: none;
    background: white;
    cursor: pointer;

    @apply border-foreground size-5 rounded-full border;
  }

  #hue-slider::-moz-range-thumb {
    background: white;
    cursor: pointer;

    @apply border-foreground/30 border-1.5 size-5 rounded-full;
  }
</style>

<script is:inline data-astro-rerun>
  {
    // To avoid redeclaration errors
    const DEFAULT_HUE = 256;

    const applyThemeHue = (angle) => {
      const dataTheme =
        document.documentElement.getAttribute("data-theme") ?? "light";

      const properties = {
        light: {
          background: `oklch(100% 0.01 ${angle}deg)`,
          foreground: `oklch(14.5% 0.05 ${angle}deg)`,
          secondary: `oklch(97% 0.01 ${angle}deg)`,
          border: `oklch(92.2% 0.015 ${angle}deg)`,
          input: `oklch(92.2% 0.015 ${angle}deg)`,
        },
        dark: {
          background: `oklch(20% 0.01 ${angle}deg)`,
          foreground: `oklch(98.5% 0.03 ${angle}deg)`,
          secondary: `oklch(25% 0.01 ${angle}deg)`,
          border: `oklch(25% 0.015 ${angle}deg)`,
          input: `oklch(25% 0.015 ${angle}deg)`,
        },
      };
      if (!Object.keys(properties).includes(dataTheme)) {
        console.warn(
          `Theme "${dataTheme}" not found. Using default properties.`,
        );
        return;
      }

      Object.entries(properties[dataTheme]).forEach(([key, value]) => {
        document.documentElement.style.setProperty(`--${key}`, value);
      });
    };

    const storeHue = (angle) => {
      localStorage.setItem("theme-hue", angle.toString());
    };

    const getHue = () => {
      const storedHue = localStorage?.getItem("theme-hue");
      return storedHue ? parseFloat(storedHue) : DEFAULT_HUE; // Default to 256 if not set
    };

    // Initialize the theme hue
    const hue = getHue();
    applyThemeHue(hue);
    storeHue(hue); // Store the initial hue if not already set
  }
</script>

<script>
  import { applyThemeHue, getHue, storeHue } from "./dynamicHue";

  let hueAngle = getHue();

  const initHueSlider = () => {
    // on slider change, update hue
    const slider = document.getElementById("hue-slider");

    if (slider instanceof HTMLInputElement) {
      slider.setAttribute("value", getHue().toString());
      slider.addEventListener("input", (event) => {
        if (!(event.target instanceof HTMLInputElement)) {
          console.warn("Event target is not an HTMLInputElement.");
          return;
        }
        const angle = parseFloat(event.target.value);
        applyThemeHue(angle);
        storeHue(angle);
        hueAngle = angle; // Update the local variable
      });
    } else {
      console.warn("Hue slider not found.");
    }
  };
  initHueSlider();

  // observe data-theme attribute changes
  const observer = new MutationObserver(() => {
    applyThemeHue(hueAngle);
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["data-theme"],
  });

  document.addEventListener("astro:after-swap", () => {
    // re-initialize the hue slider
    // when the page is swapped
    initHueSlider();
  });
</script>
